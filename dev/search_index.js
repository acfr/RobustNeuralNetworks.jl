var documenterSearchIndex = {"docs":
[{"location":"index.html#RobustNeuralNetworks.jl-Documentation","page":"Home","title":"RobustNeuralNetworks.jl Documentation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Bringing robust machine learning tools to Julia.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#Types","page":"Home","title":"Types","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"DirectParams","category":"page"},{"location":"index.html#RobustNeuralNetworks.DirectParams","page":"Home","title":"RobustNeuralNetworks.DirectParams","text":"mutable struct DirectParams{T}\n\nDirect (implicit) parameters used to construct a REN.\n\n\n\n\n\n","category":"type"},{"location":"index.html#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"hmatrix_to_explicit","category":"page"},{"location":"index.html#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Here's an example. You should not be able to see the import statement of Random.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Random\na = 1\nb = 2*rand()\n2a + b","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Can we continue using variables from this example?","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"println(a+b)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"We can even make things look like the REPL.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"a = 1\nb = 2\na + b","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"We can even delay execution of an example over a few different example blocks. Start a for loop here...","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"for i in 1:3\n    j = i^2","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Then write something insightful and finish it below...","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"    println(j)\nend","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"It's worth having a look at the @setup macro as well when you can. It will make it much easier to write examples that include a number of lines of setup which should be hidden. Having said that, it might be useful to show the reader how you set up the example!","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Most of your examples should be written with the @jldoctest macro. I'll give it a go below, but have a look at how ControlSystems.jl does things too.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Example:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Random\nusing RobustNeuralNetworks\n\nbatches = 50\nnu, nx, nv, ny = 4, 10, 20, 2\n\ncontracting_ren_ps = ContractingRENParams{Float64}(nu, nx, nv, ny)\ncontracting_ren = REN(contracting_ren_ps)\n\nx0 = init_states(contracting_ren, batches)\nu0 = randn(contracting_ren.nu, batches)\n\nx1, y1 = contracting_ren(x0, u0)  # Evaluates the REN over one timestep\n\nprintln(size(y1))\n\n# output\n\n(2, 50)","category":"page"},{"location":"index.html#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#Docstrings","page":"Home","title":"Docstrings","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Work on the presentation of this a bit....","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Modules = [RobustNeuralNetworks]\nPrivate = false","category":"page"},{"location":"index.html#RobustNeuralNetworks.AbstractLBDN","page":"Home","title":"RobustNeuralNetworks.AbstractLBDN","text":"abstract type AbstractLBDN\n\n\n\n\n\n","category":"type"},{"location":"index.html#RobustNeuralNetworks.AbstractREN","page":"Home","title":"RobustNeuralNetworks.AbstractREN","text":"abstract type AbstractREN\n\n\n\n\n\n","category":"type"},{"location":"index.html#RobustNeuralNetworks.AbstractREN-Tuple{VecOrMat{T} where T, VecOrMat{T} where T}","page":"Home","title":"RobustNeuralNetworks.AbstractREN","text":"(m::AbstractREN)(xt::VecOrMat, ut::VecOrMat)\n\nCall the REN given internal states xt and inputs ut. If  function arguments are matrices, each column must be a  vector of states or inputs (allows batch simulations).\n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.AbstractRENParams","page":"Home","title":"RobustNeuralNetworks.AbstractRENParams","text":"abstract type AbstractRENParams{T}\n\n\n\n\n\n","category":"type"},{"location":"index.html#RobustNeuralNetworks.ContractingRENParams","page":"Home","title":"RobustNeuralNetworks.ContractingRENParams","text":"mutable struct ContractingRENParams{T} <: AbstractRENParams{T}\n\nParameter struct to build a contracting acyclic REN.\n\n\n\n\n\n","category":"type"},{"location":"index.html#RobustNeuralNetworks.ContractingRENParams-Union{NTuple{4, Int64}, Tuple{T}} where T","page":"Home","title":"RobustNeuralNetworks.ContractingRENParams","text":"ContractingRENParams(nu, nx, nv, ny; ...)\n\nMain constructor for ContractingRENParams. ᾱ ∈ (0,1] is the upper bound on contraction rate.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.ContractingRENParams-Union{Tuple{T}, Tuple{Int64, AbstractMatrix{T}, AbstractMatrix{T}, AbstractMatrix{T}, AbstractMatrix{T}}} where T","page":"Home","title":"RobustNeuralNetworks.ContractingRENParams","text":"ContractingRENParams(nv, A, B, C, D; ...)\n\nAlternative constructor for ContractingRENParams that initialises the REN from a stable discrete-time linear system ss(A,B,C,D).\n\nTODO: Make compatible with αbar ≠ 1.0\n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.DiffREN","page":"Home","title":"RobustNeuralNetworks.DiffREN","text":"mutable struct DiffREN <: AbstractREN\n\nWrapper for Recurrent Equilibrium Network type which automatically re-computes explicit parameters every time the model is called.\n\nCompatible with Flux.jl\n\n\n\n\n\n","category":"type"},{"location":"index.html#RobustNeuralNetworks.DiffREN-Tuple{VecOrMat{T} where T, VecOrMat{T} where T}","page":"Home","title":"RobustNeuralNetworks.DiffREN","text":"(m::DiffREN)(xt::VecOrMat, ut::VecOrMat)\n\nCall the REN given internal states xt and inputs ut. If  function arguments are matrices, each column must be a  vector of states or inputs (allows batch simulations).\n\nComputes explicit parameterisation each time. This may be slow if called many times!\n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.DiffREN-Union{Tuple{AbstractRENParams{T}}, Tuple{T}} where T","page":"Home","title":"RobustNeuralNetworks.DiffREN","text":"DiffREN(ps::AbstractRENParams)\n\nConstruct DiffREN wrapper from direct parameterisation\n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.DirectParams-Union{NTuple{4, Int64}, Tuple{T}} where T","page":"Home","title":"RobustNeuralNetworks.DirectParams","text":"DirectParams{T}(nu, nx, nv; ...)\n\nConstructor for DirectParams struct. Allows for the following initialisation methods, specified as symbols by init argument:\n\n:random: Random sampling for all parameters\n:cholesky: Compute X with cholesky factorisation of H, sets E,F,P = I\n\nOption D22_free specifies whether or not to train D22 as a free parameter, or constructed separately from X3, Y3, Z3. Typically use D22_free = true for a contracting REN. Default is D22_free = false.\n\nOption D22_zero fixes D22 = 0 to remove any feedthrough. Default false.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.ExplicitParams","page":"Home","title":"RobustNeuralNetworks.ExplicitParams","text":"mutable struct ExplicitParams{T}\n\nStruct containing explicit REN parameters\n\n\n\n\n\n","category":"type"},{"location":"index.html#RobustNeuralNetworks.GeneralRENParams","page":"Home","title":"RobustNeuralNetworks.GeneralRENParams","text":"mutable struct GeneralRENParams{T} <: AbstractRENParams{T}\n\nParameter struct to build an acyclic REN with behavioural constraints encoded in Q, S, R matrices\n\n\n\n\n\n","category":"type"},{"location":"index.html#RobustNeuralNetworks.GeneralRENParams-Union{Tuple{T}, Tuple{Int64, Int64, Int64, Int64, Matrix{T}, Matrix{T}, Matrix{T}}} where T","page":"Home","title":"RobustNeuralNetworks.GeneralRENParams","text":"GeneralRENParams(nu, nx, nv, ny; ...)\n\nMain constructor for GeneralRENParams. ᾱ ∈ (0,1] is the upper bound on contraction rate.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.LBFN","page":"Home","title":"RobustNeuralNetworks.LBFN","text":"mutable struct LBFN{T} <: AbstractLBDN\n\nDirect parameters for an LBFN\n\n\n\n\n\n","category":"type"},{"location":"index.html#RobustNeuralNetworks.LBFN-Union{Tuple{T}, Tuple{Int64, Vector{Int64}, Int64}, Tuple{Int64, Vector{Int64}, Int64, T}, Tuple{Int64, Vector{Int64}, Int64, T, Any}, Tuple{Int64, Vector{Int64}, Int64, T, Any, Any}, Tuple{Int64, Vector{Int64}, Int64, T, Any, Any, Any}} where T","page":"Home","title":"RobustNeuralNetworks.LBFN","text":"LBFN{T}(nu, nh, ny, γ; ...)\n\nConstructor for an LBFN with nu inputs, nv outputs, and nh = [nh1, nh2,...] specifying the size of hidden layers. User-imposed Lipschitz bound γ has a default of 1.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.LipschitzRENParams","page":"Home","title":"RobustNeuralNetworks.LipschitzRENParams","text":"mutable struct LipschitzRENParams{T} <: AbstractRENParams{T}\n\nParameter struct to build an acyclic REN with a guaranteed Lipschitz bound of γ ∈ ℝ\n\n\n\n\n\n","category":"type"},{"location":"index.html#RobustNeuralNetworks.LipschitzRENParams-Union{Tuple{T}, Tuple{Int64, Int64, Int64, Int64, Number}} where T","page":"Home","title":"RobustNeuralNetworks.LipschitzRENParams","text":"LipschitzRENParams(nu, nx, nv, ny; ...)\n\nMain constructor for LipschitzRENParams. ᾱ ∈ (0,1] is the upper bound on contraction rate.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.PassiveRENParams","page":"Home","title":"RobustNeuralNetworks.PassiveRENParams","text":"mutable struct PassiveRENParams{T} <: AbstractRENParams{T}\n\nParameter struct to build a passive REN where Q = 0, R  = 0, S = I\n\n\n\n\n\n","category":"type"},{"location":"index.html#RobustNeuralNetworks.PassiveRENParams-Union{NTuple{4, Int64}, Tuple{T}} where T","page":"Home","title":"RobustNeuralNetworks.PassiveRENParams","text":"PassiveRENParams(nu, nx, nv, ny; ...)\n\nMain constructor for PassiveRENParams. ᾱ ∈ (0,1] is the upper bound on contraction rate. ν>0 for incrementally strictly input passive model; v == 0 for incrementally passive model. \n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.REN","page":"Home","title":"RobustNeuralNetworks.REN","text":"mutable struct REN <: AbstractREN\n\nMain Recurrent Equilibrium Network type\n\n\n\n\n\n","category":"type"},{"location":"index.html#RobustNeuralNetworks.REN-Union{Tuple{AbstractRENParams{T}}, Tuple{T}} where T","page":"Home","title":"RobustNeuralNetworks.REN","text":"REN(ps::AbstractRENParams)\n\nConstruct REN from direct parameterisation\n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.WrapREN","page":"Home","title":"RobustNeuralNetworks.WrapREN","text":"mutable struct WrapREN <: AbstractREN\n\nWrapper for Recurrent Equilibrium Network type combining direct parameters and explicit model into one type.\n\nRequires user to manually update explicit params when direct params are changed. Not compatible with Flux.jl\n\n\n\n\n\n","category":"type"},{"location":"index.html#RobustNeuralNetworks.WrapREN-Union{Tuple{AbstractRENParams{T}}, Tuple{T}} where T","page":"Home","title":"RobustNeuralNetworks.WrapREN","text":"WrapREN(ps::AbstractRENParams)\n\nConstruct REN wrapper from direct parameterisation\n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.WrapREN2","page":"Home","title":"RobustNeuralNetworks.WrapREN2","text":"mutable struct WrapREN2 <: AbstractREN\n\nWrapper for Recurrent Equilibrium Network type which automatically re-computes explicit parameters whenever the direct parameters are edited.\n\nNot compatible with Flux.jl\n\n\n\n\n\n","category":"type"},{"location":"index.html#RobustNeuralNetworks.WrapREN2-Tuple{VecOrMat{T} where T, VecOrMat{T} where T}","page":"Home","title":"RobustNeuralNetworks.WrapREN2","text":"(m::WrapREN2)(xt::VecOrMat, ut::VecOrMat)\n\nCall the REN given internal states xt and inputs ut. If  function arguments are matrices, each column must be a  vector of states or inputs (allows batch simulations).\n\nUpdates the explicit parameterisation if direct parameters  have been updated.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.WrapREN2-Union{Tuple{AbstractRENParams{T}}, Tuple{T}} where T","page":"Home","title":"RobustNeuralNetworks.WrapREN2","text":"WrapREN2(ps::AbstractRENParams)\n\nConstruct WrapREN2 wrapper from direct parameterisation\n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.direct_to_explicit-Union{Tuple{ContractingRENParams{T}}, Tuple{T}, Tuple{ContractingRENParams{T}, Any}} where T","page":"Home","title":"RobustNeuralNetworks.direct_to_explicit","text":"direct_to_explicit(ps::ContractingRENParams)\n\nConvert direct REN parameterisation to explicit parameterisation for contracting REN\n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.direct_to_explicit-Union{Tuple{GeneralRENParams{T}}, Tuple{T}, Tuple{GeneralRENParams{T}, Any}} where T","page":"Home","title":"RobustNeuralNetworks.direct_to_explicit","text":"direct_to_explicit(ps::GeneralRENParams)\n\nConvert direct REN parameterisation to explicit parameterisation using behavioural constraints encoded in Q, S, R\n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.direct_to_explicit-Union{Tuple{LipschitzRENParams{T}}, Tuple{T}, Tuple{LipschitzRENParams{T}, Any}} where T","page":"Home","title":"RobustNeuralNetworks.direct_to_explicit","text":"direct_to_explicit(ps::LipschitzRENParams)\n\nConvert direct REN parameterisation to explicit parameterisation using Lipschitz bounded behavioural constraint\n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.direct_to_explicit-Union{Tuple{PassiveRENParams{T}}, Tuple{T}, Tuple{PassiveRENParams{T}, Any}} where T","page":"Home","title":"RobustNeuralNetworks.direct_to_explicit","text":"direct_to_explicit(ps::PassiveRENParams)\n\nConvert direct REN parameterisation to explicit parameterisation using passive behavioural constraints encoded in Q, S, R\n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.init_states-Tuple{AbstractREN, Any}","page":"Home","title":"RobustNeuralNetworks.init_states","text":"init_states(m::AbstractREN, nbatches; rng=nothing)\n\nReturn matrix of (nbatches) state vectors initialised as zeros\n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.init_states-Tuple{AbstractREN}","page":"Home","title":"RobustNeuralNetworks.init_states","text":"init_states(m::AbstractREN; rng=nothing)\n\nReturn state vector initialised as zeros\n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.set_output_zero!-Tuple{AbstractRENParams}","page":"Home","title":"RobustNeuralNetworks.set_output_zero!","text":"set_output_zero!(m::AbstractRENParams)\n\nSet output map of REN to zero\n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.set_output_zero!-Tuple{AbstractREN}","page":"Home","title":"RobustNeuralNetworks.set_output_zero!","text":"set_output_zero!(m::AbstractREN)\n\nSet output map of REN to zero\n\n\n\n\n\n","category":"method"},{"location":"index.html#RobustNeuralNetworks.update_explicit!-Tuple{WrapREN}","page":"Home","title":"RobustNeuralNetworks.update_explicit!","text":"update_explicit!(m::WrapREN)\n\nUpdate explicit model using the current direct parameters\n\n\n\n\n\n","category":"method"},{"location":"index.html#TODO:","page":"Home","title":"TODO:","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Add a logo\nFill out this main documentation page\nSee ControlSystems.jl for a good example of how to structure this page.","category":"page"}]
}
